{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"VMware Cloud on AWS Packer examples \u00b6 This repository contains examples to help you get started with automating the creation of virtual machine (VM) templates in a VMware Cloud on AWS software-defined datacenter (SDDC) (or vSphere cluster) with HashiCorp Packer . Each example leverages the vsphere-iso builder and includes the high performance vmxnet3 network adapter and VMware Paravirtual SCSI controller (since NVMe controller support has not been released yet for the vsphere-iso builder). Of note, the prerequisites and default variable values in the example definition files are oriented to a VMware Cloud on AWS software-defined datacenter (SDDC) , but these examples should also be usable in most VMware vSphere environments with little to no modifications required. Considerations \u00b6 The example definition files provide the minimum necessary configuration for demonstration purposes. These VM templates are not hardened or otherwise intended for production purposes as-is. Building production-grade VM templates is possible, but out of scope for this project. Since these are examples, the host-based firewall is disabled and unconfigured. Additionally, since the intended use case is VMware Cloud on AWS , the expectation is that the NSX-T gateway and distributed firewalls would be used instead. A timestamp is appended to the VM template name so that you know exactly when it was built, and to prevent name collisions for subsequent builds. The AWS CLI is installed to provide an example of installing a package during the provisioners phase, but it's not necessary. Considerations for the ubuntu-server VM template \u00b6 As of 2020-09-04, Canonical's new automated Ubuntu server installation system that leverages cloud-init configuration, Subiquity , is not interoperable with VMware's guest customization feature . VMware has an existing open source project for providing interoperability with cloud-init , but its currently incompatible with the Subiquity implementation and this issue is being tracked in issue #50 . If guest customization is a requirement for your environment, use the ubuntu-server-legacy template instead, which leverages the legacy debian-installer preseeding system. As of 2020-09-04, one oddity of the Ubuntu 20.04.1 version of Subiquity is that the nocloud-net datasource must be used in the boot_command when providing the user-data and meta-data files via virtual floppy disk. This is odd because the nocloud datasource should be used when these files are local, and the nocloud-net datasource should be used when they're remote. One Packer community discussion about this can be found here . Considerations for the windows-server VM template \u00b6 Sysprep (generalize) is not run at the end of the build because the expectation is that the security identity (SID) will be reset via the guest customization specification created in the prerequisites below. Chocolatey is installed for programmatically installing software packages, but its not necessary. The OpenSSH Server feature is installed as a remote management option for your VMs, but this isn't necessary either. Prerequisites \u00b6 VMware vSphere environment \u00b6 A VMware Cloud on AWS software-defined datacenter (SDDC) (or a vSphere cluster ) A network segment (or port group ) with DHCP and internet connectivity Note: If specific destinations and ports are needed for building outbound firewall policy, please refer to the definition files as these may change over time, and the definition files will always be authoritative. Packer installed in a location with the following connectivity: HTTPS (443/tcp) connectivity to vCenter SSH (22/tcp) connectivity to the target network segment listed above for communicating with the VM during the provisioners phase WinRM-HTTPS (5986/tcp) connectivity to the target network segment listed above for communicating with Windows VMs during the provisioners phase Sufficient storage capacity for storing the VM guest operating sytem installation ISO image files, as well as the VM templates' virtual hard disks and other files in your vSAN WorkloadDatastore (or a writeable datastore ) Note: As of 2020-08-24, the vsphere-iso builder supports content libraries as a source location for ISO files. This feature isn't well-documented yet, but was released as part of v1.6.2 . vCenter credentials with cloudadmin (or administrative ) rights Custom fine-grained permissions are possible, but beyond the scope of this project Prerequisites for Linux VM templates \u00b6 Create a Linux guest customization specification . Prerequisites for Windows VM templates \u00b6 Create a Windows guest customization specification that generates a new security identity (SID). On a Windows server or client where you have administrative rights... Download the latest Windows Assessment and Deployment Kit (Windows ADK) . Note: Only the Deployment tools feature that includes the Windows System Image Manager (SIM) is necessary. Getting started \u00b6 Build preparation \u00b6 Download the ISO image files for the VM template(s) that you want to build: Examples: ubuntu-server Ubuntu Server 20.04.1 LTS ubuntu-server-legacy Ubuntu Server 20.04.1 LTS (legacy Debian installer) windows-server Windows Server 2019 VMware Tools 11.1.0 (or whichever version is appropriate for your vSphere cluster ) Upload the VM guest operating system installation ISO files to a directory/folder named ISO in the target datastore Create one or more .pkrvars.hcl variable definition files for defining values for variables that you want to persist between builds Example variable definition file for building an Ubuntu Server 18.04 LTS VM template with the ubuntu-server-legacy.pkr.hcl definition file: # ./ubuntu-server-18-legacy.pkrvars.hcl # http://cdimage.ubuntu.com/releases/18.04/release/ubuntu-18.04.5-server-amd64.iso iso_filename = \"ubuntu-18.04.5-server-amd64.iso\" vm_name = \"template-ubuntu-server-18.04-amd64-legacy\" Preparing to build the ubuntu-server VM template \u00b6 . \u251c\u2500\u2500 http/ \u2502 \u251c\u2500\u2500 scripts/ \u2502 \u2502 \u2514\u2500\u2500 linux/ \u2502 \u2502 \u2514\u2500\u2500 awscli.sh \u2502 \u2514\u2500\u2500 ubuntu-server/ \u2502 \u251c\u2500\u2500 meta-data \u2502 \u2514\u2500\u2500 user-data \u2514\u2500\u2500 ubuntu-server.pkr.hcl Note: The ./http/ubuntu-server/user-data and ./http/ubuntu-server/meta-data are the cloud-init configuration files that are used to provide all of the input necessary to build the VM template without manual intervention, and ./http/ubuntu-server/meta-data file is supposed to be empty. Create a password hash with mkpasswd Example: $ mkpasswd --method=SHA-512 --rounds=4096 Password: [password hash] In the ./http/ubuntu-server/user-data file, set the password for the ubuntu user account: # ./http/ubuntu-server/user-data autoinstall : identity : password : [ password hash ] Preparing to build the ubuntu-server-legacy VM template \u00b6 . \u251c\u2500\u2500 http/ \u2502 \u251c\u2500\u2500 scripts/ \u2502 \u2502 \u2514\u2500\u2500 linux/ \u2502 \u2502 \u2514\u2500\u2500 awscli.sh \u2502 \u2514\u2500\u2500 ubuntu-server-legacy/ \u2502 \u2514\u2500\u2500 ubuntu-server-legacy.seed \u2514\u2500\u2500 ubuntu-server-legacy.pkr.hcl Note: The ./http/ubuntu-server-legacy/ubuntu-server-legacy.seed file is the debian-installer preseed configuration file that is used to provide all of the input necessary to build the VM template without manual intervention. Create a password hash with mkpasswd Example: $ mkpasswd --method=SHA-512 --rounds=4096 Password: [password hash] In the ./http/ubuntu-server-legacy/ubuntu-server-legacy.seed file, set the password for the ubuntu user account: # ./http/ubuntu-server-legacy/ubuntu-server-legacy.seed d-i passwd/user-password-crypted password [password hash] Preparing to build the windows-server VM template \u00b6 . \u251c\u2500\u2500 http/ \u2502 \u251c\u2500\u2500 scripts/ \u2502 \u2502 \u2514\u2500\u2500 windows/ \u2502 \u2502 \u251c\u2500\u2500 Initialize-WinRM.ps1 \u2502 \u2502 \u251c\u2500\u2500 Install-AWSCLI.ps1 \u2502 \u2502 \u251c\u2500\u2500 Install-Chocolatey.ps1 \u2502 \u2502 \u251c\u2500\u2500 Install-OpenSSHServer.ps1 \u2502 \u2502 \u2514\u2500\u2500 Reset-AutoLogonCount.ps1 \u2502 \u2514\u2500\u2500 windows-server/ \u2502 \u2514\u2500\u2500 2019/ \u2502 \u251c\u2500\u2500 autounattend.xml \u2502 \u2514\u2500\u2500 install_Windows Server 2019 SERVERDATACENTER.clg \u2514\u2500\u2500 windows-server.pkr.hcl Note: The example answer file ( ./http/scripts/windows-server/autounattend.xml ) and catalog file ( ./http/scripts/windows-server/install_Windows Server 2019 SERVERDATACENTER.clg ) are configured for a silent install of Windows Server 2019 Datacenter Evaluation Edition that also installs VMware Tools and temporarily enables WinRM (for the Packer provisioner phase). When you want to programmatically build other types of Windows VMs, please checkout the Unattended Windows Setup Reference . In Window System Image Manager, go to File > Open Select Windows Image... and open ./http/windows-server/2019/install_Windows Server 2019 SERVERDATACENTER.clg Then go to File > Open Answer File... and open the example answer file: ./http/windows-server/2019/autounattend.xml In the Windows Image pane, expand amd64_Microsoft-Windows-Shell-Setup_10.0.17763.1_neutral > UserAccounts , then right-click AdministratorPassword and select Add Setting to Pass 7 oobeSystem , and then set the password Value = [desired password] Note: By default, the passwords will be masked when saved via a hash. In the Windows Image pane, expand amd64_Microsoft-Windows-Shell-Setup_10.0.17763.1_neutral > AutoLogon , then right-click Password and select Add Setting to Pass 7 oobeSystem , and then set the password Value = [desired password] Then go to File > Save Answer File to save the changes Build your VM template \u00b6 Run packer build with the appropriate parameters Example: packer build -var-file = './sddc.pkrvars.hcl' -var-file = './ubuntu.pkrvars.hcl' './ubuntu-server.pkr.hcl' A few minutes later, you'll have a fresh, new VM template. Voila! You're done. Troubleshooting \u00b6 Please see Debugging Packer Builds . Next steps \u00b6 Deploy a VM from your new VM template(s) and apply your guest customization specification that you created in the prerequisites (except when building with the ubuntu-server definition files due to the guest customization issue mentioned above) Customize the definition files and build new VM templates. Start building all of your VM templates programmatically! Reference \u00b6 ubuntu-server : cloud-init documentation ubuntu-server-legacy : debian-installer preseed documentation windows-server : Unattended Windows Setup Security \u00b6 See CONTRIBUTING for more information. License \u00b6 This library is licensed under the MIT-0 License. See the LICENSE file.","title":"Home"},{"location":"#vmware-cloud-on-aws-packer-examples","text":"This repository contains examples to help you get started with automating the creation of virtual machine (VM) templates in a VMware Cloud on AWS software-defined datacenter (SDDC) (or vSphere cluster) with HashiCorp Packer . Each example leverages the vsphere-iso builder and includes the high performance vmxnet3 network adapter and VMware Paravirtual SCSI controller (since NVMe controller support has not been released yet for the vsphere-iso builder). Of note, the prerequisites and default variable values in the example definition files are oriented to a VMware Cloud on AWS software-defined datacenter (SDDC) , but these examples should also be usable in most VMware vSphere environments with little to no modifications required.","title":"VMware Cloud on AWS Packer examples"},{"location":"#considerations","text":"The example definition files provide the minimum necessary configuration for demonstration purposes. These VM templates are not hardened or otherwise intended for production purposes as-is. Building production-grade VM templates is possible, but out of scope for this project. Since these are examples, the host-based firewall is disabled and unconfigured. Additionally, since the intended use case is VMware Cloud on AWS , the expectation is that the NSX-T gateway and distributed firewalls would be used instead. A timestamp is appended to the VM template name so that you know exactly when it was built, and to prevent name collisions for subsequent builds. The AWS CLI is installed to provide an example of installing a package during the provisioners phase, but it's not necessary.","title":"Considerations"},{"location":"#considerations-for-the-ubuntu-server-vm-template","text":"As of 2020-09-04, Canonical's new automated Ubuntu server installation system that leverages cloud-init configuration, Subiquity , is not interoperable with VMware's guest customization feature . VMware has an existing open source project for providing interoperability with cloud-init , but its currently incompatible with the Subiquity implementation and this issue is being tracked in issue #50 . If guest customization is a requirement for your environment, use the ubuntu-server-legacy template instead, which leverages the legacy debian-installer preseeding system. As of 2020-09-04, one oddity of the Ubuntu 20.04.1 version of Subiquity is that the nocloud-net datasource must be used in the boot_command when providing the user-data and meta-data files via virtual floppy disk. This is odd because the nocloud datasource should be used when these files are local, and the nocloud-net datasource should be used when they're remote. One Packer community discussion about this can be found here .","title":"Considerations for the ubuntu-server VM template"},{"location":"#considerations-for-the-windows-server-vm-template","text":"Sysprep (generalize) is not run at the end of the build because the expectation is that the security identity (SID) will be reset via the guest customization specification created in the prerequisites below. Chocolatey is installed for programmatically installing software packages, but its not necessary. The OpenSSH Server feature is installed as a remote management option for your VMs, but this isn't necessary either.","title":"Considerations for the windows-server VM template"},{"location":"#prerequisites","text":"","title":"Prerequisites"},{"location":"#vmware-vsphere-environment","text":"A VMware Cloud on AWS software-defined datacenter (SDDC) (or a vSphere cluster ) A network segment (or port group ) with DHCP and internet connectivity Note: If specific destinations and ports are needed for building outbound firewall policy, please refer to the definition files as these may change over time, and the definition files will always be authoritative. Packer installed in a location with the following connectivity: HTTPS (443/tcp) connectivity to vCenter SSH (22/tcp) connectivity to the target network segment listed above for communicating with the VM during the provisioners phase WinRM-HTTPS (5986/tcp) connectivity to the target network segment listed above for communicating with Windows VMs during the provisioners phase Sufficient storage capacity for storing the VM guest operating sytem installation ISO image files, as well as the VM templates' virtual hard disks and other files in your vSAN WorkloadDatastore (or a writeable datastore ) Note: As of 2020-08-24, the vsphere-iso builder supports content libraries as a source location for ISO files. This feature isn't well-documented yet, but was released as part of v1.6.2 . vCenter credentials with cloudadmin (or administrative ) rights Custom fine-grained permissions are possible, but beyond the scope of this project","title":"VMware vSphere environment"},{"location":"#prerequisites-for-linux-vm-templates","text":"Create a Linux guest customization specification .","title":"Prerequisites for Linux VM templates"},{"location":"#prerequisites-for-windows-vm-templates","text":"Create a Windows guest customization specification that generates a new security identity (SID). On a Windows server or client where you have administrative rights... Download the latest Windows Assessment and Deployment Kit (Windows ADK) . Note: Only the Deployment tools feature that includes the Windows System Image Manager (SIM) is necessary.","title":"Prerequisites for Windows VM templates"},{"location":"#getting-started","text":"","title":"Getting started"},{"location":"#build-preparation","text":"Download the ISO image files for the VM template(s) that you want to build: Examples: ubuntu-server Ubuntu Server 20.04.1 LTS ubuntu-server-legacy Ubuntu Server 20.04.1 LTS (legacy Debian installer) windows-server Windows Server 2019 VMware Tools 11.1.0 (or whichever version is appropriate for your vSphere cluster ) Upload the VM guest operating system installation ISO files to a directory/folder named ISO in the target datastore Create one or more .pkrvars.hcl variable definition files for defining values for variables that you want to persist between builds Example variable definition file for building an Ubuntu Server 18.04 LTS VM template with the ubuntu-server-legacy.pkr.hcl definition file: # ./ubuntu-server-18-legacy.pkrvars.hcl # http://cdimage.ubuntu.com/releases/18.04/release/ubuntu-18.04.5-server-amd64.iso iso_filename = \"ubuntu-18.04.5-server-amd64.iso\" vm_name = \"template-ubuntu-server-18.04-amd64-legacy\"","title":"Build preparation"},{"location":"#preparing-to-build-the-ubuntu-server-vm-template","text":". \u251c\u2500\u2500 http/ \u2502 \u251c\u2500\u2500 scripts/ \u2502 \u2502 \u2514\u2500\u2500 linux/ \u2502 \u2502 \u2514\u2500\u2500 awscli.sh \u2502 \u2514\u2500\u2500 ubuntu-server/ \u2502 \u251c\u2500\u2500 meta-data \u2502 \u2514\u2500\u2500 user-data \u2514\u2500\u2500 ubuntu-server.pkr.hcl Note: The ./http/ubuntu-server/user-data and ./http/ubuntu-server/meta-data are the cloud-init configuration files that are used to provide all of the input necessary to build the VM template without manual intervention, and ./http/ubuntu-server/meta-data file is supposed to be empty. Create a password hash with mkpasswd Example: $ mkpasswd --method=SHA-512 --rounds=4096 Password: [password hash] In the ./http/ubuntu-server/user-data file, set the password for the ubuntu user account: # ./http/ubuntu-server/user-data autoinstall : identity : password : [ password hash ]","title":"Preparing to build the ubuntu-server VM template"},{"location":"#preparing-to-build-the-ubuntu-server-legacy-vm-template","text":". \u251c\u2500\u2500 http/ \u2502 \u251c\u2500\u2500 scripts/ \u2502 \u2502 \u2514\u2500\u2500 linux/ \u2502 \u2502 \u2514\u2500\u2500 awscli.sh \u2502 \u2514\u2500\u2500 ubuntu-server-legacy/ \u2502 \u2514\u2500\u2500 ubuntu-server-legacy.seed \u2514\u2500\u2500 ubuntu-server-legacy.pkr.hcl Note: The ./http/ubuntu-server-legacy/ubuntu-server-legacy.seed file is the debian-installer preseed configuration file that is used to provide all of the input necessary to build the VM template without manual intervention. Create a password hash with mkpasswd Example: $ mkpasswd --method=SHA-512 --rounds=4096 Password: [password hash] In the ./http/ubuntu-server-legacy/ubuntu-server-legacy.seed file, set the password for the ubuntu user account: # ./http/ubuntu-server-legacy/ubuntu-server-legacy.seed d-i passwd/user-password-crypted password [password hash]","title":"Preparing to build the ubuntu-server-legacy VM template"},{"location":"#preparing-to-build-the-windows-server-vm-template","text":". \u251c\u2500\u2500 http/ \u2502 \u251c\u2500\u2500 scripts/ \u2502 \u2502 \u2514\u2500\u2500 windows/ \u2502 \u2502 \u251c\u2500\u2500 Initialize-WinRM.ps1 \u2502 \u2502 \u251c\u2500\u2500 Install-AWSCLI.ps1 \u2502 \u2502 \u251c\u2500\u2500 Install-Chocolatey.ps1 \u2502 \u2502 \u251c\u2500\u2500 Install-OpenSSHServer.ps1 \u2502 \u2502 \u2514\u2500\u2500 Reset-AutoLogonCount.ps1 \u2502 \u2514\u2500\u2500 windows-server/ \u2502 \u2514\u2500\u2500 2019/ \u2502 \u251c\u2500\u2500 autounattend.xml \u2502 \u2514\u2500\u2500 install_Windows Server 2019 SERVERDATACENTER.clg \u2514\u2500\u2500 windows-server.pkr.hcl Note: The example answer file ( ./http/scripts/windows-server/autounattend.xml ) and catalog file ( ./http/scripts/windows-server/install_Windows Server 2019 SERVERDATACENTER.clg ) are configured for a silent install of Windows Server 2019 Datacenter Evaluation Edition that also installs VMware Tools and temporarily enables WinRM (for the Packer provisioner phase). When you want to programmatically build other types of Windows VMs, please checkout the Unattended Windows Setup Reference . In Window System Image Manager, go to File > Open Select Windows Image... and open ./http/windows-server/2019/install_Windows Server 2019 SERVERDATACENTER.clg Then go to File > Open Answer File... and open the example answer file: ./http/windows-server/2019/autounattend.xml In the Windows Image pane, expand amd64_Microsoft-Windows-Shell-Setup_10.0.17763.1_neutral > UserAccounts , then right-click AdministratorPassword and select Add Setting to Pass 7 oobeSystem , and then set the password Value = [desired password] Note: By default, the passwords will be masked when saved via a hash. In the Windows Image pane, expand amd64_Microsoft-Windows-Shell-Setup_10.0.17763.1_neutral > AutoLogon , then right-click Password and select Add Setting to Pass 7 oobeSystem , and then set the password Value = [desired password] Then go to File > Save Answer File to save the changes","title":"Preparing to build the windows-server VM template"},{"location":"#build-your-vm-template","text":"Run packer build with the appropriate parameters Example: packer build -var-file = './sddc.pkrvars.hcl' -var-file = './ubuntu.pkrvars.hcl' './ubuntu-server.pkr.hcl' A few minutes later, you'll have a fresh, new VM template. Voila! You're done.","title":"Build your VM template"},{"location":"#troubleshooting","text":"Please see Debugging Packer Builds .","title":"Troubleshooting"},{"location":"#next-steps","text":"Deploy a VM from your new VM template(s) and apply your guest customization specification that you created in the prerequisites (except when building with the ubuntu-server definition files due to the guest customization issue mentioned above) Customize the definition files and build new VM templates. Start building all of your VM templates programmatically!","title":"Next steps"},{"location":"#reference","text":"ubuntu-server : cloud-init documentation ubuntu-server-legacy : debian-installer preseed documentation windows-server : Unattended Windows Setup","title":"Reference"},{"location":"#security","text":"See CONTRIBUTING for more information.","title":"Security"},{"location":"#license","text":"This library is licensed under the MIT-0 License. See the LICENSE file.","title":"License"},{"location":"about/code_of_conduct/","text":"Code of Conduct \u00b6 This project has adopted the Amazon Open Source Code of Conduct . For more information see the Code of Conduct FAQ or contact opensource-codeofconduct@amazon.com with any additional questions or comments.","title":"Code of conduct"},{"location":"about/code_of_conduct/#code-of-conduct","text":"This project has adopted the Amazon Open Source Code of Conduct . For more information see the Code of Conduct FAQ or contact opensource-codeofconduct@amazon.com with any additional questions or comments.","title":"Code of Conduct"},{"location":"about/contributing/","text":"Contributing Guidelines \u00b6 Thank you for your interest in contributing to our project. Whether it's a bug report, new feature, correction, or additional documentation, we greatly value feedback and contributions from our community. Please read through this document before submitting any issues or pull requests to ensure we have all the necessary information to effectively respond to your bug report or contribution. Reporting Bugs/Feature Requests \u00b6 We welcome you to use the GitHub issue tracker to report bugs or suggest features. When filing an issue, please check existing open, or recently closed, issues to make sure somebody else hasn't already reported the issue. Please try to include as much information as you can. Details like these are incredibly useful: A reproducible test case or series of steps The version of our code being used Any modifications you've made relevant to the bug Anything unusual about your environment or deployment Contributing via Pull Requests \u00b6 Contributions via pull requests are much appreciated. Before sending us a pull request, please ensure that: You are working against the latest source on the master branch. You check existing open, and recently merged, pull requests to make sure someone else hasn't addressed the problem already. You open an issue to discuss any significant work - we would hate for your time to be wasted. To send us a pull request, please: Fork the repository. Modify the source; please focus on the specific change you are contributing. If you also reformat all the code, it will be hard for us to focus on your change. Ensure local tests pass. Commit to your fork using clear commit messages. Send us a pull request, answering any default questions in the pull request interface. Pay attention to any automated CI failures reported in the pull request, and stay involved in the conversation. GitHub provides additional document on forking a repository and creating a pull request . Finding contributions to work on \u00b6 Looking at the existing issues is a great way to find something to contribute on. As our projects, by default, use the default GitHub issue labels (enhancement/bug/duplicate/help wanted/invalid/question/wontfix), looking at any 'help wanted' issues is a great place to start. Code of Conduct \u00b6 This project has adopted the Amazon Open Source Code of Conduct . For more information see the Code of Conduct FAQ or contact opensource-codeofconduct@amazon.com with any additional questions or comments. Security issue notifications \u00b6 If you discover a potential security issue in this project we ask that you notify AWS/Amazon Security via our vulnerability reporting page . Please do not create a public github issue. Licensing \u00b6 See the LICENSE file for our project's licensing. We will ask you to confirm the licensing of your contribution. We may ask you to sign a Contributor License Agreement (CLA) for larger changes.","title":"Contributing"},{"location":"about/contributing/#contributing-guidelines","text":"Thank you for your interest in contributing to our project. Whether it's a bug report, new feature, correction, or additional documentation, we greatly value feedback and contributions from our community. Please read through this document before submitting any issues or pull requests to ensure we have all the necessary information to effectively respond to your bug report or contribution.","title":"Contributing Guidelines"},{"location":"about/contributing/#reporting-bugsfeature-requests","text":"We welcome you to use the GitHub issue tracker to report bugs or suggest features. When filing an issue, please check existing open, or recently closed, issues to make sure somebody else hasn't already reported the issue. Please try to include as much information as you can. Details like these are incredibly useful: A reproducible test case or series of steps The version of our code being used Any modifications you've made relevant to the bug Anything unusual about your environment or deployment","title":"Reporting Bugs/Feature Requests"},{"location":"about/contributing/#contributing-via-pull-requests","text":"Contributions via pull requests are much appreciated. Before sending us a pull request, please ensure that: You are working against the latest source on the master branch. You check existing open, and recently merged, pull requests to make sure someone else hasn't addressed the problem already. You open an issue to discuss any significant work - we would hate for your time to be wasted. To send us a pull request, please: Fork the repository. Modify the source; please focus on the specific change you are contributing. If you also reformat all the code, it will be hard for us to focus on your change. Ensure local tests pass. Commit to your fork using clear commit messages. Send us a pull request, answering any default questions in the pull request interface. Pay attention to any automated CI failures reported in the pull request, and stay involved in the conversation. GitHub provides additional document on forking a repository and creating a pull request .","title":"Contributing via Pull Requests"},{"location":"about/contributing/#finding-contributions-to-work-on","text":"Looking at the existing issues is a great way to find something to contribute on. As our projects, by default, use the default GitHub issue labels (enhancement/bug/duplicate/help wanted/invalid/question/wontfix), looking at any 'help wanted' issues is a great place to start.","title":"Finding contributions to work on"},{"location":"about/contributing/#code-of-conduct","text":"This project has adopted the Amazon Open Source Code of Conduct . For more information see the Code of Conduct FAQ or contact opensource-codeofconduct@amazon.com with any additional questions or comments.","title":"Code of Conduct"},{"location":"about/contributing/#security-issue-notifications","text":"If you discover a potential security issue in this project we ask that you notify AWS/Amazon Security via our vulnerability reporting page . Please do not create a public github issue.","title":"Security issue notifications"},{"location":"about/contributing/#licensing","text":"See the LICENSE file for our project's licensing. We will ask you to confirm the licensing of your contribution. We may ask you to sign a Contributor License Agreement (CLA) for larger changes.","title":"Licensing"},{"location":"about/license/","text":"Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved. Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"}]}